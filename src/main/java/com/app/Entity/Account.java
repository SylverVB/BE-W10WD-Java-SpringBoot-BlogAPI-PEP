package com.app.Entity;

import jakarta.persistence.*;

/**
 * Represents an Account entity.
 */
@Entity
@Table(name="account")
public class Account {
    /**
     * The ID of this Account. This should be used as the entity's primary key.
     */
    @Column(name="accountId")
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Integer accountId;

    /**
     * The username of this Account. Must be unique and not blank.
     */
    private String username;

    /**
     * The password of this Account. Must be longer than 4 characters.
     */
    private String password;

    /**
     * Default no-args constructor required for Jackson ObjectMapper.
     */
    public Account(){}

    /**
     * Constructor for creating a new Account when the ID is generated by the database.
     * 
     * @param username the username for the new account
     * @param password the password for the new account
     */
    public Account(String username, String password){
        this.username = username;
        this.password = password;
    }

    /**
     * Constructor for retrieving an Account from the database, including all fields.
     *
     * @param accountId the ID of the account
     * @param username the username of the account
     * @param password the password of the account
     */
    public Account(Integer accountId, String username, String password) {
        this.accountId = accountId;
        this.username = username;
        this.password = password;
    }

    /**
     * Gets the account ID.
     *
     * @return the account ID
     */
    public Integer getAccountId() {
        return accountId;
    }

    /**
     * Sets the account ID.
     *
     * @param accountId the account ID to set
     */
    public void setAccountId(Integer accountId) {
        this.accountId = accountId;
    }

    /**
     * Gets the username.
     *
     * @return the username
     */
    public String getUsername() {
        return username;
    }

    /**
     * Sets the username.
     *
     * @param username the username to set
     */
    public void setUsername(String username) {
        this.username = username;
    }

    /**
     * Gets the password.
     *
     * @return the password
     */
    public String getPassword() {
        return password;
    }
    
    /**
     * Sets the password.
     *
     * @param password the password to set
     */
    public void setPassword(String password) {
        this.password = password;
    }

    /**
     * Determines whether two objects are equal, based on their fields.
     *
     * @param obj the other object to compare
     * @return true if the other object is equal to this one, false otherwise
     */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Account other = (Account) obj;
		if (accountId == null) {
			if (other.accountId != null)
				return false;
		} else if (!accountId.equals(other.accountId))
			return false;
		if (password == null) {
			if (other.password != null)
				return false;
		} else if (!password.equals(other.password))
			return false;
		if (username == null) {
			if (other.username != null)
				return false;
		} else if (!username.equals(other.username))
			return false;
		return true;
	}

    /**
     * Returns a string representation of this class.
     *
     * @return a string describing the account
     */
    @Override
    public String toString() {
        return "Account{" +
                "accountId=" + accountId +
                ", username='" + username + '\'' +
                ", password='" + password + '\'' +
                '}';
    }
}