package com.app.Entity;

import jakarta.persistence.*;

/**
 * Represents a Message entity.
 */
@Entity
@Table(name="message")
public class Message {

     /**
     * The ID of this message, automatically generated by the database.
     */
     @Column (name="messageId")
     @Id @GeneratedValue
    private Integer messageId;

    /**
     * The ID of the user who posted this message. Provided by the front-end.
     */
    @Column (name="postedBy")
    private Integer postedBy;

    /**
     * The text content of the message (not blank and under 255 characters).
     */
    @Column (name="messageText")
    private String messageText;

    /**
     * The epoch time when this message was posted (seconds since Jan 1, 1970).
     * Provided by the front-end.
     */
    @Column (name="timePostedEpoch")
    private Long timePostedEpoch;

    /**
     * Default no-args constructor required for Jackson ObjectMapper.
     */
    public Message(){
    }

    /**
     * Constructor for creating a new message when the ID is generated by the database.
     *
     * @param postedBy the ID of the user who posted the message
     * @param messageText the text of the message
     * @param timePostedEpoch the time the message was posted (epoch time)
     */
    public Message(Integer postedBy, String messageText, Long timePostedEpoch) {
        this.postedBy = postedBy;
        this.messageText = messageText;
        this.timePostedEpoch = timePostedEpoch;
    }

    /**
     * Constructor for retrieving a message from the database, including all fields.
     *
     * @param messageId the ID of the message
     * @param postedBy the ID of the user who posted the message
     * @param messageText the text of the message
     * @param timePostedEpoch the time the message was posted (epoch time)
     */
    public Message(Integer messageId, Integer postedBy, String messageText, Long timePostedEpoch) {
        this.messageId = messageId;
        this.postedBy = postedBy;
        this.messageText = messageText;
        this.timePostedEpoch = timePostedEpoch;
    }

    /**
     * Gets the message ID.
     *
     * @return the message ID
     */
    public Integer getMessageId() {
        return messageId;
    }

    /**
     * Sets the message ID.
     *
     * @param messageId the message ID to set
     */
    public void setMessageId(Integer messageId) {
        this.messageId = messageId;
    }

    /**
     * Gets the ID of the user who posted the message.
     *
     * @return the user ID
     */
    public Integer getPostedBy() {
        return postedBy;
    }
    
    /**
     * Sets the ID of the user who posted the message.
     *
     * @param postedBy the user ID to set
     */
    public void setPostedBy(Integer postedBy) {
        this.postedBy = postedBy;
    }

    /**
     * Gets the text of the message.
     *
     * @return the message text
     */
    public String getMessageText() {
        return messageText;
    }

    /**
     * Sets the text of the message.
     *
     * @param messageText the message text to set
     */
    public void setMessageText(String messageText) {
        this.messageText = messageText;
    }

    /**
     * Gets the epoch time when the message was posted.
     *
     * @return the time the message was posted
     */
    public Long getTimePostedEpoch() {
        return timePostedEpoch;
    }

    /**
     * Sets the epoch time when the message was posted.
     *
     * @param timePostedEpoch the time to set
     */
    public void setTimePostedEpoch(Long timePostedEpoch) {
        this.timePostedEpoch = timePostedEpoch;
    }

    /**
     * Determines whether two objects are equal, based on their fields.
     *
     * @param obj the other object to compare
     * @return true if the other object is equal to this one, false otherwise
     */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Message other = (Message) obj;
		if (messageId == null) {
			if (other.messageId != null)
				return false;
		} else if (!messageId.equals(other.messageId))
			return false;
		if (messageText == null) {
			if (other.messageText != null)
				return false;
		} else if (!messageText.equals(other.messageText))
			return false;
		if (postedBy == null) {
			if (other.postedBy != null)
				return false;
		} else if (!postedBy.equals(other.postedBy))
			return false;
		if (timePostedEpoch == null) {
			if (other.timePostedEpoch != null)
				return false;
		} else if (!timePostedEpoch.equals(other.timePostedEpoch))
			return false;
		return true;
	}
	
    /**
     * Returns a string representation of this class.
     *
     * @return a string describing the message
     */
    @Override
    public String toString() {
        return "Message{" +
                "messageId=" + messageId +
                ", postedBy=" + postedBy +
                ", messageText='" + messageText + '\'' +
                ", timePostedEpoch=" + timePostedEpoch +
                '}';
    }
}